{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function MapPreviewScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _ref2 = route.params || {},\n    polyline = _ref2.polyline,\n    pickup = _ref2.pickup,\n    delivery = _ref2.delivery,\n    distanceKm = _ref2.distanceKm;\n  var MapContent = function MapContent() {\n    if (!polyline) return _jsx(Text, {\n      children: \"No route to preview\"\n    });\n    var _require = require('react-leaflet'),\n      MapContainer = _require.MapContainer,\n      TileLayer = _require.TileLayer,\n      Polyline = _require.Polyline;\n    var L = require('leaflet');\n    var positions = polyline.map(function (p) {\n      return [p[0], p[1]];\n    });\n    return _jsx(\"div\", {\n      style: {\n        height: '60vh'\n      },\n      children: _jsxs(MapContainer, {\n        center: positions[0],\n        zoom: 13,\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        children: [_jsx(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        }), _jsx(Polyline, {\n          positions: positions,\n          color: \"blue\"\n        })]\n      })\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Route preview\"\n    }), _jsxs(Text, {\n      children: [\"Pickup: \", pickup]\n    }), _jsxs(Text, {\n      children: [\"Delivery: \", delivery]\n    }), _jsxs(Text, {\n      children: [\"Distance: \", distanceKm ? distanceKm.toFixed(2) + ' km' : '—']\n    }), _jsx(\"div\", {\n      style: {\n        marginTop: 12\n      },\n      children: MapContent()\n    }), _jsx(Button, {\n      title: \"Continue to Select Truck\",\n      onPress: function onPress() {\n        return navigation.navigate('SelectTruck', {\n          pickup: pickup,\n          delivery: delivery,\n          distanceKm: distanceKm\n        });\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 16,\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12\n  }\n});","map":{"version":3,"names":["React","View","Text","Button","StyleSheet","jsx","_jsx","jsxs","_jsxs","MapPreviewScreen","_ref","route","navigation","_ref2","params","polyline","pickup","delivery","distanceKm","MapContent","children","_require","require","MapContainer","TileLayer","Polyline","L","positions","map","p","style","height","center","zoom","width","url","color","styles","container","title","toFixed","marginTop","onPress","navigate","create","flex","padding","backgroundColor","fontSize","fontWeight","marginBottom"],"sources":["/home/trevor/uz_dining_app/truck_delivery_app/screens/MapPreviewScreen.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, Button, StyleSheet } from 'react-native';\n\n// The map preview is intended for web via react-leaflet. We dynamically import to avoid native errors.\nexport default function MapPreviewScreen({ route, navigation }) {\n  const { polyline, pickup, delivery, distanceKm } = route.params || {};\n\n  const MapContent = () => {\n    // render nothing if no polyline\n    if (!polyline) return <Text>No route to preview</Text>;\n    // The web runtime will use react-leaflet; we provide a different implementation for native if needed later\n    const { MapContainer, TileLayer, Polyline } = require('react-leaflet');\n    const L = require('leaflet');\n\n    // convert polyline points (array of [lat, lng]) to leaflet latlngs\n    const positions = polyline.map((p) => [p[0], p[1]]);\n\n    return (\n      <div style={{ height: '60vh' }}>\n        <MapContainer center={positions[0]} zoom={13} style={{ height: '100%', width: '100%' }}>\n          <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n          <Polyline positions={positions} color=\"blue\" />\n        </MapContainer>\n      </div>\n    );\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Route preview</Text>\n      <Text>Pickup: {pickup}</Text>\n      <Text>Delivery: {delivery}</Text>\n      <Text>Distance: {distanceKm ? distanceKm.toFixed(2) + ' km' : '—'}</Text>\n\n      <div style={{ marginTop: 12 }}>{MapContent()}</div>\n\n      <Button title=\"Continue to Select Truck\" onPress={() => navigation.navigate('SelectTruck', { pickup, delivery, distanceKm })} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, padding: 16, backgroundColor: '#fff' },\n  title: { fontSize: 20, fontWeight: '700', marginBottom: 12 }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}