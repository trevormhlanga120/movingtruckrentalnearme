{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PickupDeliveryScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    pickup = _useState2[0],\n    setPickup = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    delivery = _useState4[0],\n    setDelivery = _useState4[1];\n  var onNext = function onNext() {\n    navigation.navigate('Distance', {\n      pickup: pickup,\n      delivery: delivery\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Pickup & Delivery\"\n    }), _jsx(Text, {\n      children: \"Pickup Address or \\\"lat,lng\\\"\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: pickup,\n      onChangeText: setPickup,\n      placeholder: \"e.g. 26.2041,28.0473 or 123 Main St\"\n    }), _jsx(Text, {\n      children: \"Delivery Address or \\\"lat,lng\\\"\"\n    }), _jsx(TextInput, {\n      style: styles.input,\n      value: delivery,\n      onChangeText: setDelivery,\n      placeholder: \"e.g. 26.0823,28.0536 or 456 Other Ave\"\n    }), _jsx(Button, {\n      title: \"Calculate Distance\",\n      onPress: onNext\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 16\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: '#ccc',\n    padding: 8,\n    marginBottom: 12\n  }\n});","map":{"version":3,"names":["React","useState","View","Text","TextInput","Button","StyleSheet","jsx","_jsx","jsxs","_jsxs","PickupDeliveryScreen","_ref","navigation","route","_useState","_useState2","_slicedToArray","pickup","setPickup","_useState3","_useState4","delivery","setDelivery","onNext","navigate","style","styles","container","children","title","input","value","onChangeText","placeholder","onPress","create","flex","backgroundColor","padding","fontSize","fontWeight","marginBottom","borderWidth","borderColor"],"sources":["/home/trevor/uz_dining_app/truck_delivery_app/screens/PickupDeliveryScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, TextInput, Button, StyleSheet } from 'react-native';\n\nexport default function PickupDeliveryScreen({ navigation, route }) {\n  // allow manual entry of addresses or coordinates\n  const [pickup, setPickup] = useState('');\n  const [delivery, setDelivery] = useState('');\n\n  const onNext = () => {\n    // For simplicity we pass strings; DistanceScreen will attempt to parse coords if provided\n    navigation.navigate('Distance', { pickup, delivery });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Pickup & Delivery</Text>\n\n      <Text>Pickup Address or \"lat,lng\"</Text>\n      <TextInput style={styles.input} value={pickup} onChangeText={setPickup} placeholder=\"e.g. 26.2041,28.0473 or 123 Main St\" />\n\n      <Text>Delivery Address or \"lat,lng\"</Text>\n      <TextInput style={styles.input} value={delivery} onChangeText={setDelivery} placeholder=\"e.g. 26.0823,28.0536 or 456 Other Ave\" />\n\n      <Button title=\"Calculate Distance\" onPress={onNext} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n  title: { fontSize: 20, fontWeight: '700', marginBottom: 12 },\n  input: { borderWidth: 1, borderColor: '#ccc', padding: 8, marginBottom: 12 }\n});\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,MAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAGxC,eAAe,SAASC,oBAAoBA,CAAAC,IAAA,EAAwB;EAAA,IAArBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IAAEC,KAAK,GAAAF,IAAA,CAALE,KAAK;EAE9D,IAAAC,SAAA,GAA4Bd,QAAQ,CAAC,EAAE,CAAC;IAAAe,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAjCG,MAAM,GAAAF,UAAA;IAAEG,SAAS,GAAAH,UAAA;EACxB,IAAAI,UAAA,GAAgCnB,QAAQ,CAAC,EAAE,CAAC;IAAAoB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAArCE,QAAQ,GAAAD,UAAA;IAAEE,WAAW,GAAAF,UAAA;EAE5B,IAAMG,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;IAEnBX,UAAU,CAACY,QAAQ,CAAC,UAAU,EAAE;MAAEP,MAAM,EAANA,MAAM;MAAEI,QAAQ,EAARA;IAAS,CAAC,CAAC;EACvD,CAAC;EAED,OACEZ,KAAA,CAACR,IAAI;IAACwB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BrB,IAAA,CAACL,IAAI;MAACuB,KAAK,EAAEC,MAAM,CAACG,KAAM;MAAAD,QAAA,EAAC;IAAiB,CAAM,CAAC,EAEnDrB,IAAA,CAACL,IAAI;MAAA0B,QAAA,EAAC;IAA2B,CAAM,CAAC,EACxCrB,IAAA,CAACJ,SAAS;MAACsB,KAAK,EAAEC,MAAM,CAACI,KAAM;MAACC,KAAK,EAAEd,MAAO;MAACe,YAAY,EAAEd,SAAU;MAACe,WAAW,EAAC;IAAqC,CAAE,CAAC,EAE5H1B,IAAA,CAACL,IAAI;MAAA0B,QAAA,EAAC;IAA6B,CAAM,CAAC,EAC1CrB,IAAA,CAACJ,SAAS;MAACsB,KAAK,EAAEC,MAAM,CAACI,KAAM;MAACC,KAAK,EAAEV,QAAS;MAACW,YAAY,EAAEV,WAAY;MAACW,WAAW,EAAC;IAAuC,CAAE,CAAC,EAElI1B,IAAA,CAACH,MAAM;MAACyB,KAAK,EAAC,oBAAoB;MAACK,OAAO,EAAEX;IAAO,CAAE,CAAC;EAAA,CAClD,CAAC;AAEX;AAEA,IAAMG,MAAM,GAAGrB,UAAU,CAAC8B,MAAM,CAAC;EAC/BR,SAAS,EAAE;IAAES,IAAI,EAAE,CAAC;IAAEC,eAAe,EAAE,MAAM;IAAEC,OAAO,EAAE;EAAG,CAAC;EAC5DT,KAAK,EAAE;IAAEU,QAAQ,EAAE,EAAE;IAAEC,UAAU,EAAE,KAAK;IAAEC,YAAY,EAAE;EAAG,CAAC;EAC5DX,KAAK,EAAE;IAAEY,WAAW,EAAE,CAAC;IAAEC,WAAW,EAAE,MAAM;IAAEL,OAAO,EAAE,CAAC;IAAEG,YAAY,EAAE;EAAG;AAC7E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}