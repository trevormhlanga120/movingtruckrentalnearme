{"ast":null,"code":"export function decodePolyline(str) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  var index = 0,\n    lat = 0,\n    lng = 0,\n    coordinates = [],\n    shift = 0,\n    result = 0;\n  var factor = Math.pow(10, precision);\n  while (index < str.length) {\n    var b = void 0,\n      _shift = 0,\n      _result = 0;\n    do {\n      b = str.charCodeAt(index++) - 63;\n      _result |= (b & 0x1f) << _shift;\n      _shift += 5;\n    } while (b >= 0x20);\n    var deltaLat = _result & 1 ? ~(_result >> 1) : _result >> 1;\n    lat += deltaLat;\n    _shift = 0;\n    _result = 0;\n    do {\n      b = str.charCodeAt(index++) - 63;\n      _result |= (b & 0x1f) << _shift;\n      _shift += 5;\n    } while (b >= 0x20);\n    var deltaLon = _result & 1 ? ~(_result >> 1) : _result >> 1;\n    lng += deltaLon;\n    coordinates.push([lat / factor, lng / factor]);\n  }\n  return coordinates;\n}","map":{"version":3,"names":["decodePolyline","str","precision","arguments","length","undefined","index","lat","lng","coordinates","shift","result","factor","Math","pow","b","charCodeAt","deltaLat","deltaLon","push"],"sources":["/home/trevor/uz_dining_app/truck_delivery_app/utils/polylineDecode.js"],"sourcesContent":["// minimal polyline decoder for Google's encoded polyline\nexport function decodePolyline(str, precision = 5) {\n  let index = 0, lat = 0, lng = 0, coordinates = [], shift = 0, result = 0;\n  const factor = Math.pow(10, precision);\n\n  while (index < str.length) {\n    let b, shift = 0, result = 0;\n    do { b = str.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);\n    const deltaLat = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    lat += deltaLat;\n\n    shift = 0; result = 0;\n    do { b = str.charCodeAt(index++) - 63; result |= (b & 0x1f) << shift; shift += 5; } while (b >= 0x20);\n    const deltaLon = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    lng += deltaLon;\n\n    coordinates.push([lat / factor, lng / factor]);\n  }\n\n  return coordinates;\n}\n"],"mappings":"AACA,OAAO,SAASA,cAAcA,CAACC,GAAG,EAAiB;EAAA,IAAfC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC/C,IAAIG,KAAK,GAAG,CAAC;IAAEC,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAG,CAAC;IAAEC,WAAW,GAAG,EAAE;IAAEC,KAAK,GAAG,CAAC;IAAEC,MAAM,GAAG,CAAC;EACxE,IAAMC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEZ,SAAS,CAAC;EAEtC,OAAOI,KAAK,GAAGL,GAAG,CAACG,MAAM,EAAE;IACzB,IAAIW,CAAC;MAAEL,MAAK,GAAG,CAAC;MAAEC,OAAM,GAAG,CAAC;IAC5B,GAAG;MAAEI,CAAC,GAAGd,GAAG,CAACe,UAAU,CAACV,KAAK,EAAE,CAAC,GAAG,EAAE;MAAEK,OAAM,IAAI,CAACI,CAAC,GAAG,IAAI,KAAKL,MAAK;MAAEA,MAAK,IAAI,CAAC;IAAE,CAAC,QAAQK,CAAC,IAAI,IAAI;IACpG,IAAME,QAAQ,GAAKN,OAAM,GAAG,CAAC,GAAI,EAAEA,OAAM,IAAI,CAAC,CAAC,GAAIA,OAAM,IAAI,CAAG;IAChEJ,GAAG,IAAIU,QAAQ;IAEfP,MAAK,GAAG,CAAC;IAAEC,OAAM,GAAG,CAAC;IACrB,GAAG;MAAEI,CAAC,GAAGd,GAAG,CAACe,UAAU,CAACV,KAAK,EAAE,CAAC,GAAG,EAAE;MAAEK,OAAM,IAAI,CAACI,CAAC,GAAG,IAAI,KAAKL,MAAK;MAAEA,MAAK,IAAI,CAAC;IAAE,CAAC,QAAQK,CAAC,IAAI,IAAI;IACpG,IAAMG,QAAQ,GAAKP,OAAM,GAAG,CAAC,GAAI,EAAEA,OAAM,IAAI,CAAC,CAAC,GAAIA,OAAM,IAAI,CAAG;IAChEH,GAAG,IAAIU,QAAQ;IAEfT,WAAW,CAACU,IAAI,CAAC,CAACZ,GAAG,GAAGK,MAAM,EAAEJ,GAAG,GAAGI,MAAM,CAAC,CAAC;EAChD;EAEA,OAAOH,WAAW;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}