{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { calculateDistanceKm } from \"../utils/distance\";\nimport axios from 'axios';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction parseLatLng(input) {\n  if (!input || typeof input !== 'string') return null;\n  var parts = input.split(',').map(function (s) {\n    return s.trim();\n  });\n  if (parts.length !== 2) return null;\n  var lat = parseFloat(parts[0]);\n  var lng = parseFloat(parts[1]);\n  if (Number.isNaN(lat) || Number.isNaN(lng)) return null;\n  return {\n    lat: lat,\n    lng: lng\n  };\n}\nexport default function DistanceScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _route$params = route.params,\n    pickup = _route$params.pickup,\n    delivery = _route$params.delivery;\n  var parsedPickup = parseLatLng(pickup);\n  var parsedDelivery = parseLatLng(delivery);\n  var distanceKm = useMemo(function () {\n    if (parsedPickup && parsedDelivery) {\n      return calculateDistanceKm(parsedPickup.lat, parsedPickup.lng, parsedDelivery.lat, parsedDelivery.lng);\n    }\n    return null;\n  }, [parsedPickup, parsedDelivery]);\n  var onChooseTruck = function onChooseTruck() {\n    navigation.navigate('SelectTruck', {\n      pickup: pickup,\n      delivery: delivery,\n      distanceKm: distanceKm\n    });\n  };\n  var onDrivingDistance = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var resp = yield axios.get('http://localhost:3333/api/directions', {\n          params: {\n            origin: pickup,\n            destination: delivery\n          }\n        });\n        if (resp.data && resp.data.routes && resp.data.routes.length) {\n          var _route = resp.data.routes[0];\n          var legs = _route.legs;\n          var meters = 0;\n          for (var leg of legs) meters += leg.distance.value;\n          var km = meters / 1000;\n          var overview = _route.overview_polyline && _route.overview_polyline.points;\n          if (overview) {\n            var _require = require(\"../utils/polylineDecode\"),\n              decodePolyline = _require.decodePolyline;\n            var points = decodePolyline(overview);\n            navigation.navigate('MapPreview', {\n              pickup: pickup,\n              delivery: delivery,\n              distanceKm: km,\n              polyline: points\n            });\n            return;\n          }\n          navigation.navigate('SelectTruck', {\n            pickup: pickup,\n            delivery: delivery,\n            distanceKm: km\n          });\n          return;\n        }\n        Alert.alert('No route', 'Could not get driving route from server');\n      } catch (e) {\n        console.warn('Driving distance failed', e.message || e);\n        Alert.alert('Error', 'Driving distance lookup failed. Ensure server has GOOGLE_API_KEY set.');\n      }\n    });\n    return function onDrivingDistance() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Distance\"\n    }), _jsxs(Text, {\n      children: [\"Pickup: \", pickup]\n    }), _jsxs(Text, {\n      children: [\"Delivery: \", delivery]\n    }), distanceKm === null ? _jsx(Text, {\n      style: styles.warn,\n      children: \"Could not parse coordinates. Enter coordinates as \\\"lat,lng\\\" to auto-calc distance, or proceed to enter distance manually in the next screen.\"\n    }) : _jsxs(Text, {\n      style: styles.distance,\n      children: [\"Distance: \", distanceKm.toFixed(2), \" km\"]\n    }), _jsx(Button, {\n      title: \"Choose Truck\",\n      onPress: onChooseTruck\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    padding: 16\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: '700',\n    marginBottom: 12\n  },\n  warn: {\n    color: '#b35000',\n    marginVertical: 12\n  },\n  distance: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginVertical: 12\n  }\n});","map":{"version":3,"names":["React","useMemo","View","Text","Button","StyleSheet","Alert","calculateDistanceKm","axios","jsx","_jsx","jsxs","_jsxs","parseLatLng","input","parts","split","map","s","trim","length","lat","parseFloat","lng","Number","isNaN","DistanceScreen","_ref","navigation","route","_route$params","params","pickup","delivery","parsedPickup","parsedDelivery","distanceKm","onChooseTruck","navigate","onDrivingDistance","_ref2","_asyncToGenerator","resp","get","origin","destination","data","routes","legs","meters","leg","distance","value","km","overview","overview_polyline","points","_require","require","decodePolyline","polyline","alert","e","console","warn","message","apply","arguments","style","styles","container","children","title","toFixed","onPress","create","flex","backgroundColor","padding","fontSize","fontWeight","marginBottom","color","marginVertical"],"sources":["/home/trevor/uz_dining_app/truck_delivery_app/screens/DistanceScreen.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { View, Text, Button, StyleSheet, Alert } from 'react-native';\nimport { calculateDistanceKm } from '../utils/distance';\nimport axios from 'axios';\n\nfunction parseLatLng(input) {\n  if (!input || typeof input !== 'string') return null;\n  const parts = input.split(',').map((s) => s.trim());\n  if (parts.length !== 2) return null;\n  const lat = parseFloat(parts[0]);\n  const lng = parseFloat(parts[1]);\n  if (Number.isNaN(lat) || Number.isNaN(lng)) return null;\n  return { lat, lng };\n}\n\nexport default function DistanceScreen({ navigation, route }) {\n  const { pickup, delivery } = route.params;\n\n  const parsedPickup = parseLatLng(pickup);\n  const parsedDelivery = parseLatLng(delivery);\n\n  // If both are coordinate-like we can calculate; otherwise distance is unknown (would need geocoding)\n  const distanceKm = useMemo(() => {\n    if (parsedPickup && parsedDelivery) {\n      return calculateDistanceKm(parsedPickup.lat, parsedPickup.lng, parsedDelivery.lat, parsedDelivery.lng);\n    }\n    return null;\n  }, [parsedPickup, parsedDelivery]);\n\n  const onChooseTruck = () => {\n    navigation.navigate('SelectTruck', { pickup, delivery, distanceKm });\n  };\n\n  const onDrivingDistance = async () => {\n    // call server /api/directions?origin=..&destination=..\n    try {\n      const resp = await axios.get('http://localhost:3333/api/directions', { params: { origin: pickup, destination: delivery } });\n      if (resp.data && resp.data.routes && resp.data.routes.length) {\n        const route = resp.data.routes[0];\n        const legs = route.legs;\n        let meters = 0;\n        for (const leg of legs) meters += leg.distance.value;\n        const km = meters / 1000;\n        // if an overview_polyline exists, decode and show map preview first\n        const overview = route.overview_polyline && route.overview_polyline.points;\n        if (overview) {\n          const { decodePolyline } = require('../utils/polylineDecode');\n          const points = decodePolyline(overview);\n          navigation.navigate('MapPreview', { pickup, delivery, distanceKm: km, polyline: points });\n          return;\n        }\n        navigation.navigate('SelectTruck', { pickup, delivery, distanceKm: km });\n        return;\n      }\n      Alert.alert('No route', 'Could not get driving route from server');\n    } catch (e) {\n      console.warn('Driving distance failed', e.message || e);\n      Alert.alert('Error', 'Driving distance lookup failed. Ensure server has GOOGLE_API_KEY set.');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Distance</Text>\n      <Text>Pickup: {pickup}</Text>\n      <Text>Delivery: {delivery}</Text>\n\n      {distanceKm === null ? (\n        <Text style={styles.warn}>Could not parse coordinates. Enter coordinates as \"lat,lng\" to auto-calc distance, or proceed to enter distance manually in the next screen.</Text>\n      ) : (\n        <Text style={styles.distance}>Distance: {distanceKm.toFixed(2)} km</Text>\n      )}\n\n      <Button title=\"Choose Truck\" onPress={onChooseTruck} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, backgroundColor: '#fff', padding: 16 },\n  title: { fontSize: 20, fontWeight: '700', marginBottom: 12 },\n  warn: { color: '#b35000', marginVertical: 12 },\n  distance: { fontSize: 18, fontWeight: '600', marginVertical: 12 }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}